class KernelScenario(object):
    """Base scenario kernel.

    This kernel subclass is responsible for generating components for an
    experiment. This may includes creating load, solar generation profiles
    for nodes.


    In addition to generating load, solar generation profiles for simulation
    initialization, the scenario kernel perform also two tasks:

    * State acquisition and distribution: the scenario kernel contains several
    methods that can be used to acquire state information on the properties of
    the grid that is being simulated.

    * Hacking definition: the scenario kernel defines what will be happened at
    hack timestep.

    # TODO: define better hacking logic.
    """

    def __init__(self, master_kernel):
        """Instantiate the base scenario kernel.

        Parameters
        ----------
        master_kernel : pycigar.core.kernel.Kernel
            The highest level kernel (used to call methods from other
            sub-kernels)
        """
        self.master_kernel = master_kernel
        self.kernel_api = None

    def pass_api(self, kernel_api):
        """Accquire the kernel api that was generated by the simulation kernel.

        Parameters
        ----------
        kernel_api : any
            an API that is used to interact with the simulator.
        """
        self.kernel_api = kernel_api

    def update(self, reset):
        """Update the current scenario with current state information.

        This will update the new nodes' voltage and reset the power and
        reactive power injection at each node to zero.
        This also define the logic at hack timestep.

        Parameters
        ----------
        reset : bool
            specifies whether the simulator was reset in the last simulation
            step.
        """
        raise NotImplementedError

    def close(self):
        """Close the scenario."""
        raise NotImplementedError
