class KernelDevice(object):
    """Base device kernel.

    This kernel subclass is responsible for managing devices that connected to
    node during the simulation.


    In addition to generating devices for simulation initialization,
    the device kernel perform task:

    * Control acquisition and distribution: the device kernel contains several
    methods that can be used to acquire controllers, set the control setting
    of the controlled device.
    """

    def __init__(self, master_kernel):
        """Instantiate the base device kernel.

        Parameters
        ----------
        master_kernel : pycigar.core.kernel.Kernel
            The highest level kernel (used to call methods from other
            sub-kernels)
        """
        self.master_kernel = master_kernel
        self.kernel_api = None

    def pass_api(self, kernel_api):
        """Accquire the kernel api that was generated by the simulation kernel.

        Parameters
        ----------
        kernel_api : any
            an API that is used to interact with the simulator.
        """
        self.kernel_api = kernel_api

    def update(self, reset):
        """Update devices with new control settings and get the power, reactive power injecting to the connected node.

        If reset is True, reset devices to their initial state.

        Parameters
        ----------
        reset : bool
            specifies whether the simulator was reset in the last simulation
            step.
        """
        raise NotImplementedError

    def close(self):
        """Close device kernel, delete all device instances."""
        raise NotImplementedError
