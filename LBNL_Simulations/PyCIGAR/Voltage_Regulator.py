# # A sample code to test the python OpenDSS interface for voltage regulators and capacitors which also includes the use of OpenDSSdirect.py library
import opendssdirect as dss
from opendssdirect.utils import Iterator
import matplotlib.pyplot as plt
import numpy as np

dss.run_command('Redirect feeder13_U_R_Pecan/feeder13_U_R_Pecan.dss')
print(dss.RegControls.AllNames())
dss.RegControls.Name('lvr-lvr_01')
dss.RegControls.MaxTapChange(16)

dss.Capacitors.Name('cap_675')
dss.Capacitors.kvar(600)

dss.Solution.Solve()
tap_settings = [i() for i in Iterator(dss.RegControls, 'MaxTapChange')]
print('Tap Settings Values:{}'.format(tap_settings))

capacitor_off_settings = [1.01, 1.01]
dss.CapControls.First()
counter = 0
while True:
    dss.CapControls.OFFSetting(capacitor_off_settings[counter])
    counter += 1
    if not dss.CapControls.Next() > 0:
        break

print('Confirm the Solution Mode: {}'.format(dss.Solution.ModeID()))
dss.Solution.Solve()

dss.Monitors.Name('VAR_Meter_675')
time = dss.Solution.Number()/len(dss.Monitors.dblHour())*3600**np.asarray(dss.Monitors.dblHour()) # 1 hour = 3600 seconds

print(len(dss.Monitors.dblHour()), dss.Solution.Number())
print(dss.Solution.StepSize())

Reactive_power = np.asarray(dss.Monitors.Channel(2)) + np.asarray(dss.Monitors.Channel(4)) + np.asarray(dss.Monitors.Channel(6))

plt.figure()
plt.plot(time, -Reactive_power)
plt.title('VAR generated by Capacitor')
plt.xlabel('seconds')
plt.show()
